#------------------------------------------------------------------------------
# Autor: Gerald Vindas (B67839)
# Clasificar edad en menor y mayor
#------------------------------------------------------------------------------
# Datos
.data
    message .ascii “Digite su edad"
    greather .ascii “Mayor de edad”
    smaller .ascii “Menor de edad”
    age word 0
#------------------------------------------------------------------------------
# Codigo
.code
    main:
        lux     r3, message  # Load de la direccion de la variable fact
                                       # Carga la direccion de la hilera
                                       # en el registro de parametro
        addi    r1, r0, 1    # Se carga el flag 1 para imprimir por pantalla
        syscall                # Llama la interrupcion y segun el flag realiza lo que se espera
        addi   r1, r0, 2 # Se carga el flag 2 para leer
        syscall 
        mov r3, r2 # Se mueve la edad al reg 3
        cmp r3, 17 # Se compara  
        jg mayor # Si es mayor imprime mensaje de mayor
        lux r3, menor
        jmp llamado
   mayor: 
        lux r3, mayor
   llamado:
        addi r1, r0, 1
        syscall #Se imprime mensaje


  #------------------------------------------------------------------------------
# Autor: Gerald Vindas (B67839)
# Clasificar un número en par e impar
#------------------------------------------------------------------------------
# Datos
.data
    message .ascii “Digite un número"
    even_m .ascii “Numero par”
    odd_m .ascii “Numero impar”
    number word 0
#------------------------------------------------------------------------------
# Codigo
.code
    main:
        lux     r3, message  # Load de la direccion de la variable fact
                                       # Carga la direccion de la hilera
                                       # en el registro de parametro
        addi    r1, r0, 1    # Se carga el flag 1 para imprimir por pantalla
        syscall                # Llama la interrupcion y segun el flag realiza lo que se espera
        addi   r1, r0, 2 # Se carga el flag 2 para leer
        syscall 
        mov r3, r2 # Se mueve el número al reg 3
        call isPar # Llamado de método
        cmp r2, 0 # Se compara  
        je even # Si es mayor imprime mensaje de mayor
        lux r3, odd_m
        jmp llamado
   even: 
        lux r3, even_m
   llamado:
        addi r1, r0, 1
        syscall #Se imprime mensaje
        exit


isPar:
      mov r2, r3
      modi r2, 2 # se hace módulo y queda en reg2
      ret # Resultado va en registro 2 

  

