#------------------------------------------------------------------------------
# A continuación se exponen los elementos generales que tiene un script de la
# un programa en el ISA especificado. Los "taps" son 4 espacios.
# Se usó vim para editar este script.
#
# Adaptaciones de los códigos ensamblador de las páginas:
#
# https://learnxinyminutes.com/docs/mips/
# https://ecs-network.serv.pacific.edu/ecpe-170/tutorials/mips-example-programs
#-------------------------------------------------------------------------------
# A continuación se presenta una tabla con los syscalls definidos hasta ahora.
#
# Recopilador(es):
#
# (1) Joseph Rementería (b55823)
#
#------------------------------------------------------------------------------
# +-------+---------------------------+
# |   1   | console out               |
# +-------+---------------------------+
# |   2   | console in                |
# +-------+---------------------------+
#
#------------------------------------------------------------------------------
#
# Autor: Joseph Rementería (b55824).
#------------------------------------------------------------------------------
# Sección de datos.
.data
    #--------------------------------------------------------------------------
    # El formato es "<etiqueta> .<tipo> <valor>
    # TODO: definir los tipos aceptados.
    hello_string .ascii "Hello, World!"
#------------------------------------------------------------------------------
# Sección de código.
.code
    #--------------------------------------------------------------------------
    # "main" es una etiqueta que siempre debe estar, se pueden agregar cuantas
    # etiquestas se deseen despues de main.
    main:
        #----------------------------------------------------------------------
        # Se asume addi tiene la estructura regDes, regOri, IMM.
        addi    r3, r0, 5              # Carga un 5 a r3.
        addi    r4, r0, 7              # Carga un 7 a r4.
        #----------------------------------------------------------------------
        # Se asume lo mismo con la instrucción add, sub, etc.
        add     r5, r3, r4             # r5 := r3 + r4 = 5 + 7 = 12.
        sub     r6, r3, r4             # r6 := r3 - r4 = 5 - 2 = -2.
        jmp main                       # Sí, un loop infinito.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Autor: Alejandro Chacon (B51867)
# Imprimir un mensaje en pantalla
#------------------------------------------------------------------------------
# Datos
.data
    fact .ascii "Antman will success against Thanos!"
#------------------------------------------------------------------------------
# Codigo
.code
    main:
        lux     r3, fact               # Load de la direccion de la variable fact
                                       # Carga la direccion de la hilera
                                       # en el registro de parametro
        addi    r1, r0, 1              # Se carga el flag 1 para imprimir por pantalla
        syscall                        # Llama la interrupcion y segun el flag realiza lo que se espera
        jmp main

#------------------------------------------------------------------------------
# Autor: Kevin Jiménez (B59218)
# Suma los primeros N numeros, y el resultado lo imprime en pantalla
#------------------------------------------------------------------------------
# Datos
.data
    msj1      .ascii "¿Cuantos números desea sumar?\n"
    respuesta .ascii "El resultado es "
#------------------------------------------------------------------------------
# Codigo
.code
    main:
        lux     r3, msj1               # Load de la direccion de la variable fact
                                       # Carga la direccion de la hilera
                                       # en el registro de parametro
        addi    r1, r0, 1              # Se carga el flag 1 para imprimir por pantalla
        syscall                        # Llama la interrupcion y segun el flag realiza lo que se espera

        addi    r1, r0, 2              # Se carga el flag 2 para recibir entrada de usuario
        syscall                        # Llama la interrupcion y segun el flag realiza lo que se espera

        addi    r4, r0, r0             # Resultado sum
        addi    r5, r0, r0             # Indice i
    ciclo:
        addi    r5, r5, 1              # i = i + 1
        add     r4, r5, r4             # sum = sum + i
        jls     ciclo, r5, r2          # hace otro ciclo

        lux     r3, respuesta               # Load de la direccion de la variable fact
                                       # Carga la direccion de la hilera
                                       # en el registro de parametro
        addi    r1, r0, 1              # Se carga el flag 1 para imprimir por pantalla
        syscall                        # Llama la interrupcion y segun el flag realiza lo que se espera


        addi    r3, 0, r4
        addi    r1, r0, 1              # Se carga el flag 1 para imprimir por pantalla
        syscall                        # Llama la interrupcion y segun el flag realiza lo que se espera
        ret
#-------------------------------------------------------------------------------
